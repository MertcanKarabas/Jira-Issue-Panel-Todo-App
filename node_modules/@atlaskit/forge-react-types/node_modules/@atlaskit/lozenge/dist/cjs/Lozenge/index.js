"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _text = _interopRequireDefault(require("@atlaskit/ds-explorations/text"));
var _primitives = require("@atlaskit/primitives");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable @atlassian/tangerine/import/entry-points */
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
/* eslint-disable @atlaskit/design-system/no-unsafe-design-token-usage */

var baseStyles = (0, _primitives.xcss)({
  display: 'inline-flex',
  borderRadius: 'border.radius',
  blockSize: 'min-content',
  position: 'static',
  overflow: 'hidden'
});
/**
 * __Lozenge__
 *
 * A lozenge is a visual indicator used to highlight an item's status for quick recognition.
 *
 * - [Examples](https://atlassian.design/components/lozenge/examples)
 * - [Code](https://atlassian.design/components/lozenge/code)
 * - [Usage](https://atlassian.design/components/lozenge/usage)
 */
var Lozenge = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var children = _ref.children,
    testId = _ref.testId,
    _ref$isBold = _ref.isBold,
    isBold = _ref$isBold === void 0 ? false : _ref$isBold,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? 200 : _ref$maxWidth,
    style = _ref.style;
  var appearanceStyle = isBold ? 'bold' : 'subtle';
  var appearanceType = appearance in backgroundColors[appearanceStyle] ? appearance : 'default';
  var maxWidthValue = typeof maxWidth === 'string' ? maxWidth : "".concat(maxWidth, "px");
  var maxWidthIsPc = typeof maxWidth === 'string' && /%$/.test(maxWidth);
  return /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    as: "span",
    backgroundColor: backgroundColors[appearanceStyle][appearanceType],
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      maxWidth: maxWidthIsPc ? maxWidth : '100%'
    },
    paddingInline: "space.050",
    xcss: baseStyles,
    testId: testId
  }, /*#__PURE__*/_react.default.createElement(_text.default, {
    fontSize: "size.050",
    fontWeight: "bold",
    lineHeight: "lineHeight.100",
    textTransform: "uppercase",
    color: textColors[appearanceStyle][appearanceType],
    shouldTruncate: true,
    UNSAFE_style: {
      color: style === null || style === void 0 ? void 0 : style.color,
      // to negate paddingInline specified on Box above
      maxWidth: maxWidthIsPc ? '100%' : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
    },
    testId: testId && "".concat(testId, "--text")
  }, children));
});
Lozenge.displayName = 'Lozenge';
var _default = exports.default = Lozenge; // Lozenge colors
var backgroundColors = {
  bold: {
    default: 'color.background.neutral.bold',
    inprogress: 'color.background.information.bold',
    moved: 'color.background.warning.bold',
    new: 'color.background.discovery.bold',
    removed: 'color.background.danger.bold',
    success: 'color.background.success.bold'
  },
  subtle: {
    default: 'color.background.neutral',
    inprogress: 'color.background.information',
    moved: 'color.background.warning',
    new: 'color.background.discovery',
    removed: 'color.background.danger',
    success: 'color.background.success'
  }
};
var textColors = {
  bold: {
    default: 'inverse',
    inprogress: 'inverse',
    moved: 'warning.inverse',
    new: 'inverse',
    removed: 'inverse',
    success: 'inverse'
  },
  subtle: {
    default: 'subtle',
    inprogress: 'information',
    moved: 'warning',
    new: 'discovery',
    removed: 'danger',
    success: 'success'
  }
};