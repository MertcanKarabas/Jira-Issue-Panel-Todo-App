import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
import { css } from '@emotion/react';

// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports
import { gridSize } from '@atlaskit/theme/constants';
import { getColors } from './colors';
var globalGridSize = gridSize();
var dimensions = {
  regular: {
    height: globalGridSize * 2,
    width: globalGridSize * 4
  },
  large: {
    height: globalGridSize * 2 + globalGridSize / 2,
    width: globalGridSize * 5
  }
};
var getHeight = function getHeight(_ref) {
  var size = _ref.size;
  return dimensions[size].height;
};
var getWidth = function getWidth(_ref2) {
  var size = _ref2.size;
  return dimensions[size].width;
};
var borderWidth = 2;
var paddingUnitless = globalGridSize / 4;
var transition = 'transform 0.2s ease';
export var getStyles = function getStyles(size) {
  var colors = getColors();

  // TODO: Use tokens and reorganize to alphasemantic ordering (DSP-11769 DSP-11770)
  /* eslint-disable @atlaskit/design-system/ensure-design-token-usage/preview,@repo/internal/styles/consistent-style-ordering */
  return css(_objectSpread(_objectSpread({
    boxSizing: 'content-box',
    display: 'inline-block',
    padding: borderWidth,
    margin: borderWidth,
    backgroundClip: 'content-box',
    backgroundColor: colors.backgroundColorUnchecked,
    borderRadius: "".concat(getHeight({
      size: size
    }), "px"),
    border: "".concat(borderWidth, "px solid transparent"),
    height: "".concat(getHeight({
      size: size
    }), "px"),
    position: 'relative',
    transition: "".concat(transition),
    width: "".concat(getWidth({
      size: size
    }), "px"),
    '&[data-checked]': {
      backgroundColor: colors.backgroundColorChecked,
      color: colors.iconColorChecked
    },
    '&[data-disabled]:not([data-checked])': {
      backgroundColor: colors.backgroundColorUncheckedDisabled
    },
    '&[data-disabled][data-checked],&[data-disabled][data-checked]:hover': {
      backgroundColor: colors.backgroundColorCheckedDisabled
    },
    '&:focus-within': {
      border: "".concat(borderWidth, "px solid ").concat(colors.borderColorFocus)
    },
    '&:hover': {
      backgroundColor: colors.backgroundColorUncheckedHover,
      cursor: 'pointer'
    },
    '&[data-disabled]:hover,&[data-disabled][data-checked]:hover,&[data-disabled]:not([data-checked]):hover': {
      cursor: 'not-allowed'
    },
    '&[data-checked]:hover': {
      backgroundColor: colors.backgroundColorCheckedHover
    },
    '&:not([data-checked]):hover': {
      backgroundColor: colors.backgroundColorUncheckedHover
    },
    '&[data-disabled]:not([data-checked]):hover': {
      backgroundColor: colors.backgroundColorCheckedDisabled
    },
    color: colors.iconColorUnchecked,
    '&[data-disabled], &[data-disabled][data-checked], &[data-disabled][data-checked]:hover': {
      color: colors.iconColorDisabled
    },
    // the input element underneath
    'input[type="checkbox"]': {
      opacity: 0,
      margin: 0,
      padding: 0,
      border: 'none',
      '&:focus': {
        outline: 'none !important'
      }
    },
    // slider
    '::before': {
      backgroundColor: colors.handleBackgroundColor,
      borderRadius: "var(--ds-border-radius-circle, 50%)",
      content: '""',
      position: 'absolute',
      transform: 'initial',
      transition: transition,
      insetBlockEnd: "".concat(2 * paddingUnitless, "px"),
      height: "".concat(getHeight({
        size: size
      }) - paddingUnitless * 2, "px"),
      width: "".concat(getHeight({
        size: size
      }) - paddingUnitless * 2, "px"),
      // initially we set left as left-most position
      insetInlineStart: "".concat(2 * paddingUnitless, "px")
    },
    '&[data-checked]::before': {
      backgroundColor: colors.handleBackgroundColorChecked,
      // when  it's checked, slide the pseudo-element to right-most postion
      transform: "translateX(".concat(getHeight({
        size: size
      }), "px)")
    },
    '&[data-disabled]::before': {
      backgroundColor: colors.handleBackgroundColorDisabled,
      zIndex: 1
    },
    // icons - check and cross
    '> span': {
      position: 'absolute',
      insetBlockStart: "".concat(paddingUnitless, "px")
    },
    // This is the first of the two on/off symbols. The first of type is a
    // hidden text `span` for labeling
    '> span:nth-last-of-type(2)': {
      insetInlineStart: "3px"
    },
    '> span:last-of-type': {
      insetInlineEnd: "3px"
    }
  }, size === 'large' && {
    '> span': {
      position: 'absolute',
      height: '20px',
      width: '20px'
    }
  }), {}, {
    '@media screen and (forced-colors: active)': {
      '::before': {
        filter: 'grayscale(100%) invert(1)'
      },
      '&:focus-within': {
        outline: '1px solid'
      }
    }
  }));
};