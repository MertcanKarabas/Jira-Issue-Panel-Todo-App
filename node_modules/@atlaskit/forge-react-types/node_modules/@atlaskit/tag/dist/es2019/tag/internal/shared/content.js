/** @jsx jsx */

import { css, jsx } from '@emotion/react';
import { buttonWidthUnitless, cssVar, defaultTextPadding, maxTextWidth, maxTextWidthUnitless, textFontSize, textMarginLeft, textPaddingRight } from '../../../constants';
const baseStyles = css({
  maxWidth: maxTextWidth,
  paddingTop: "var(--ds-space-025, 2px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  paddingRight: defaultTextPadding,
  paddingBottom: "var(--ds-space-025, 2px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  paddingLeft: defaultTextPadding,
  fontSize: textFontSize,
  fontWeight: 'normal',
  lineHeight: 1,
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
const linkStyles = css({
  color: `var(${cssVar.color.text.link})`,
  pointerEvents: 'auto',
  textDecoration: 'none',
  '&:hover': {
    color: `var(${cssVar.color.text.hover})`,
    textDecoration: 'underline'
  },
  '&:active': {
    color: `var(${cssVar.color.text.active})`,
    textDecoration: 'underline'
  },
  '&:focus': {
    outline: 'none'
  }
});
const hasAfterStyles = css({
  maxWidth: `${maxTextWidthUnitless - buttonWidthUnitless}px`,
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  paddingRight: textPaddingRight
});
const hasBeforeStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  marginLeft: textMarginLeft
});
const Content = ({
  elemBefore = null,
  isRemovable = true,
  text = '',
  color = 'standard',
  href,
  linkComponent
}) => {
  const Link = linkComponent !== null && linkComponent !== void 0 ? linkComponent : 'a';
  if (href) {
    return jsx(Link, {
      href: href,
      "data-color": color,
      css: [baseStyles, linkStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  } else {
    return jsx("span", {
      css: [baseStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  }
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Content;