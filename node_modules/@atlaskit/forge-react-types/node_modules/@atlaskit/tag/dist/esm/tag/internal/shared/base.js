import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["before", "contentElement", "after", "testId", "appearance", "style", "color", "href", "className"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/** @jsx jsx */
import React from 'react';
import { css, jsx } from '@emotion/react';
import { cssVar, defaultMargin, tagHeight } from '../../../constants';
import * as styles from '../../../styles';
var baseStyles = css({
  display: 'inline-flex',
  height: tagHeight,
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  margin: defaultMargin,
  padding: "var(--ds-space-0, 0px)",
  position: 'relative',
  backgroundColor: "var(".concat(cssVar.color.background.default, ")"),
  borderRadius: "var(".concat(cssVar.borderRadius, ")"),
  color: "var(".concat(cssVar.color.text.default, ")"),
  cursor: 'default',
  lineHeight: 1,
  overflow: 'hidden'
});
var interactiveStyles = css({
  '&:hover': {
    backgroundColor: "var(".concat(cssVar.color.background.hover, ")")
  },
  '&:active': {
    backgroundColor: "var(".concat(cssVar.color.background.active, ")")
  }
});
var focusRingStyles = css({
  '&:focus-within': {
    boxShadow: "0 0 0 2px var(".concat(cssVar.color.focusRing, ")"),
    outline: 'none'
  }
});
var nonStandardLinkStyles = css({
  '&:active': {
    color: "var(".concat(cssVar.color.text.active, ")")
  }
});
var BaseTag = /*#__PURE__*/React.forwardRef(function BaseTag(_ref, ref) {
  var _objectSpread2;
  var before = _ref.before,
    contentElement = _ref.contentElement,
    after = _ref.after,
    testId = _ref.testId,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    style = _ref.style,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'standard' : _ref$color,
    href = _ref.href,
    className = _ref.className,
    other = _objectWithoutProperties(_ref, _excluded);
  var isLink = Boolean(href);
  var isRemovable = Boolean(after);
  var isInteractive = isLink || isRemovable;
  var isStandardLink = isLink && color === 'standard';

  // Change link text color if  the tag is standard color
  var textLinkColors = isStandardLink ? styles.textColors['standardLink'] : styles.textColors[color];
  var backgroundHoverColors = isRemovable && !isLink ? styles.backgroundColors[color] : styles.linkHoverBackgroundColors[color];
  var backgroundActiveColors = isRemovable && !isLink ? styles.backgroundColors[color] : styles.linkActiveBackgroundColors[color];
  return jsx("span", _extends({}, other, {
    ref: ref,
    css: [baseStyles, (isRemovable || isLink) && focusRingStyles, isLink && !isStandardLink && nonStandardLinkStyles, isInteractive && interactiveStyles],
    style: _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, cssVar.color.text.default, styles.textColors[color]), _defineProperty(_objectSpread2, cssVar.color.text.hover, styles.textHoverColors[color]), _defineProperty(_objectSpread2, cssVar.color.text.active, styles.textActiveColors[color]), _defineProperty(_objectSpread2, cssVar.color.text.link, textLinkColors), _defineProperty(_objectSpread2, cssVar.color.background.default, styles.backgroundColors[color]), _defineProperty(_objectSpread2, cssVar.color.background.hover, backgroundHoverColors), _defineProperty(_objectSpread2, cssVar.color.background.active, backgroundActiveColors), _defineProperty(_objectSpread2, cssVar.color.focusRing, styles.focusRingColors), _defineProperty(_objectSpread2, cssVar.color.removeButton.default, styles.removeButtonColors[color]), _defineProperty(_objectSpread2, cssVar.color.removeButton.hover, styles.removeButtonHoverColors[color]), _defineProperty(_objectSpread2, cssVar.borderRadius, styles.borderRadius[appearance]), _objectSpread2), style),
    className: className,
    "data-testid": testId
  }), before, contentElement, after);
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default BaseTag;