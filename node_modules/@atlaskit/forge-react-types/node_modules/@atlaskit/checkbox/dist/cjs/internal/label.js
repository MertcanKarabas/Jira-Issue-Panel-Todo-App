"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Label;
var _react = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _constants = require("./constants");
/** @jsx jsx */

var baseStyles = (0, _react.css)({
  display: 'grid',
  gridAutoColumns: '1fr',
  gridAutoRows: 'min-content',
  color: "var(--ds-text, ".concat(_colors.N900, ")"),
  cursor: 'default',
  fontFamily: "var(--ds-font-family-sans, ".concat(_constants.fontFamily, ")")
});
var textLabelLayoutStyles = (0, _react.css)({
  gap: "var(--ds-space-0, 0px)".concat(" ", "var(--ds-space-050, 4px)"),
  gridTemplateColumns: 'min-content auto'
});
var disabledStyles = (0, _react.css)({
  color: "var(--ds-text-disabled, ".concat(_colors.N80, ")"),
  cursor: 'not-allowed'
});
var labelStyles = (0, _react.css)({
  /**
   * Background
   */
  '--local-background': "var(--ds-background-input, ".concat(_colors.N10, ")"),
  '--local-background-active': "var(--ds-background-input-pressed, ".concat(_colors.B50, ")"),
  '--local-background-checked': "var(--ds-background-selected-bold, ".concat(_colors.B400, ")"),
  '--local-background-checked-hover': "var(--ds-background-selected-bold-hovered, ".concat(_colors.B300, ")"),
  '--local-background-disabled': "var(--ds-background-disabled, ".concat(_colors.N20, ")"),
  '--local-background-hover': "var(--ds-background-input-hovered, ".concat(_colors.N30, ")"),
  /**
   * Border
   */
  '--local-border': (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.update-border-radio-checkbox_7askv') ? "var(--ds-border-bold, ".concat(_colors.N100, ")") : "var(--ds-border-input, ".concat(_colors.N40, ")"),
  '--local-border-active': "var(--ds-border, ".concat(_colors.B50, ")"),
  '--local-border-checked': "var(--ds-background-selected-bold, ".concat(_colors.B400, ")"),
  '--local-border-checked-hover': "var(--ds-background-selected-bold-hovered, ".concat(_colors.B300, ")"),
  '--local-border-checked-invalid': "var(--ds-border-danger, ".concat(_colors.R300, ")"),
  '--local-border-disabled': "var(--ds-background-disabled, ".concat(_colors.N20, ")"),
  '--local-border-focus': "var(--ds-border-focused, ".concat(_colors.B200, ")"),
  '--local-border-hover': (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.update-border-radio-checkbox_7askv') ? "var(--ds-border-bold, ".concat(_colors.N100, ")") : "var(--ds-border-input, ".concat(_colors.N40, ")"),
  '--local-border-invalid': "var(--ds-border-danger, ".concat(_colors.R300, ")"),
  /**
   * Tick
   */
  '--local-tick-active': "var(--ds-icon-inverse, ".concat(_colors.B400, ")"),
  '--local-tick-checked': "var(--ds-icon-inverse, ".concat(_colors.N10, ")"),
  '--local-tick-disabled': "var(--ds-icon-disabled, ".concat(_colors.N70, ")"),
  '--local-tick-rest': 'transparent'
});
function Label(_ref) {
  var children = _ref.children,
    isDisabled = _ref.isDisabled,
    testId = _ref.testId,
    label = _ref.label,
    id = _ref.id;
  return (0, _react.jsx)("label", {
    css: [baseStyles, label && textLabelLayoutStyles, isDisabled && disabledStyles, labelStyles],
    "data-testid": testId,
    "data-disabled": isDisabled || undefined,
    id: id
  }, children);
}