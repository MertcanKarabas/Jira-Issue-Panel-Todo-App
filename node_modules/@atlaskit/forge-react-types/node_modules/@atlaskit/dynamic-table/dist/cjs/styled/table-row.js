"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableBodyRow = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _dynamicTable = require("./dynamic-table");
var _excluded = ["isHighlighted", "children", "style", "testId"];
/** @jsx jsx */
var rowStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-neutral-subtle, transparent)",
  '&:focus-visible': {
    outline: "2px solid ".concat("var(--ds-border-focused, ".concat("var(".concat(_dynamicTable.tableRowCSSVars.CSS_VAR_HOVER_BACKGROUND, ")"), ")")),
    outlineOffset: "-2px"
  }
});
var rowBackgroundStyles = (0, _react2.css)({
  '&:hover': {
    backgroundColor: "var(--ds-background-neutral-subtle-hovered, ".concat("var(".concat(_dynamicTable.tableRowCSSVars.CSS_VAR_HOVER_BACKGROUND, ")"), ")")
  }
});
var rowHighlightedBackgroundStyles = (0, _react2.css)({
  backgroundColor: "var(--ds-background-selected, ".concat("var(".concat(_dynamicTable.tableRowCSSVars.CSS_VAR_HIGHLIGHTED_BACKGROUND, ")"), ")"),
  '&:hover': {
    backgroundColor: "var(--ds-background-selected-hovered, ".concat("var(".concat(_dynamicTable.tableRowCSSVars.CSS_VAR_HOVER_HIGHLIGHTED_BACKGROUND, ")"), ")")
  }
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var TableBodyRow = exports.TableBodyRow = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var isHighlighted = _ref.isHighlighted,
    children = _ref.children,
    style = _ref.style,
    testId = _ref.testId,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return (0, _react2.jsx)("tr", (0, _extends2.default)({
    style: style,
    css: [rowStyles, isHighlighted ? rowHighlightedBackgroundStyles : rowBackgroundStyles]
  }, rest, {
    ref: ref,
    "data-testid": testId
  }), children);
});