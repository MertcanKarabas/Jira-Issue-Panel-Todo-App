import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @repo/internal/react/require-jsdoc */
/** @jsx jsx */
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/react';
import { B100, N30A } from '@atlaskit/theme/colors';
import { ASC, DESC } from '../internal/constants';
import { arrow, head, MSThemeColors, tableBorder } from '../theme';
import { cellStyles, fixedSizeTruncateStyles, getTruncationStyleVars, overflowTruncateStyles, truncationWidthStyles } from './constants';
const CSS_VAR_TEXT_COLOR = '--local-dynamic-table-text-color';
const rankingStyles = css({
  display: 'block'
});
const headStyles = css({
  borderBlockEnd: `none`
});
export const Head = ({
  isRanking,
  testId,
  ...props
}) => {
  return jsx("thead", _extends({
    css: [headStyles, isRanking && rankingStyles],
    "data-testid": testId
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};
const headCellStyles = css([cellStyles, {
  boxSizing: 'border-box',
  position: 'relative',
  border: 'none',
  borderBottom: `2px solid ${tableBorder.borderColor}`,
  color: `var(--ds-text-subtlest, ${`var(${CSS_VAR_TEXT_COLOR})`})`,
  fontSize: '12px',
  fontWeight: 600,
  textAlign: 'left',
  verticalAlign: 'top',
  '&:focus-visible': {
    outline: `solid 2px ${`var(--ds-border-focused, ${B100})`}`
  }
}]);
const onClickStyles = css({
  '&:hover': {
    backgroundColor: `var(--ds-background-neutral-hovered, ${N30A})`,
    cursor: 'pointer'
  }
});
const baseStyles = css({
  '& > button': {
    padding: "var(--ds-space-0, 0)",
    position: 'relative',
    appearance: 'none',
    background: 'none',
    border: 'none',
    color: 'inherit',
    cursor: 'inherit',
    fontSize: 'inherit',
    fontWeight: 'inherit',
    '&::before, &::after': {
      display: 'block',
      width: 0,
      height: 0,
      position: 'absolute',
      border: '3px solid transparent',
      content: '""',
      insetInlineEnd: "var(--ds-space-negative-100, -8px)"
    },
    '&::before': {
      borderBlockEnd: `3px solid ${arrow.defaultColor}`,
      insetBlockEnd: "var(--ds-space-100, 8px)"
    },
    '&::after': {
      borderBlockStart: `3px solid ${arrow.defaultColor}`,
      insetBlockEnd: 0
    }
  },
  '@media (forced-colors: active)': {
    '& > button': {
      '&::before, &::after': {
        border: `3px solid ${MSThemeColors.Background}`
      },
      '&::before': {
        borderBlockEnd: `3px solid ${MSThemeColors.Text}`
      },
      '&::after': {
        borderBlockStart: `3px solid ${MSThemeColors.Text}`
      }
    }
  }
});
const ascendingStyles = css({
  '& > button': {
    '&::before': {
      borderBlockEnd: `3px solid ${arrow.selectedColor}`
    }
  },
  '@media (forced-colors: active)': {
    '& > button': {
      '&::before': {
        borderBlockEnd: `3px solid ${MSThemeColors.SelectedBackground}`
      }
    }
  }
});
const descendingStyles = css({
  '& > button': {
    '&::after': {
      borderBlockStart: `3px solid ${arrow.selectedColor}`
    }
  },
  '@media (forced-colors: active)': {
    '& > button': {
      '&::after': {
        borderBlockStart: `3px solid ${MSThemeColors.SelectedBackground}`
      }
    }
  }
});
export const HeadCell = /*#__PURE__*/forwardRef(({
  width,
  children,
  isSortable,
  sortOrder,
  isFixedSize,
  shouldTruncate,
  onClick,
  style,
  testId,
  ...rest
}, ref) => {
  const mergedStyles = {
    ...style,
    ...(width && getTruncationStyleVars({
      width
    })),
    [CSS_VAR_TEXT_COLOR]: head.textColor
  };
  const isASC = sortOrder === ASC;
  const isDESC = sortOrder === DESC;
  const getFormattedSortOrder = () => {
    if (isASC) {
      return 'ascending';
    } else if (isDESC) {
      return 'descending';
    }
  };

  // If there is no content in the cell, it should be rendered as an empty `td`, not a `th`.
  // https://dequeuniversity.com/rules/axe/4.7/empty-table-header
  const Component = children ? 'th' : 'td';
  return jsx(Component, _extends({
    "aria-sort": getFormattedSortOrder(),
    style: mergedStyles,
    css: [headCellStyles, onClick && onClickStyles, truncationWidthStyles, isFixedSize && shouldTruncate && fixedSizeTruncateStyles, isFixedSize && overflowTruncateStyles, isSortable && baseStyles, isASC && ascendingStyles, isDESC && descendingStyles],
    onClick: onClick,
    ref: ref,
    "data-testid": testId
  }, rest), children);
});