"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Legend = exports.Label = void 0;
var _react = require("@emotion/react");
var _colors = require("@atlaskit/theme/colors");
var _constants = require("@atlaskit/theme/constants");
var _typography = require("@atlaskit/theme/typography");
/** @jsx jsx */

var fontFamily = (0, _constants.fontFamily)();
// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
var fieldsetLabelStyles = (0, _react.css)([(0, _typography.h200)({
  theme: {
    mode: 'light'
  }
}), {
  display: 'inline-block',
  marginTop: 0,
  marginBottom: "var(--ds-space-050, 4px)",
  color: "var(--ds-text-subtle, ".concat(_colors.N200, ")"),
  fontFamily: fontFamily
}]);

/**
 * __Label__
 *
 * A label represents a caption for an item in a user interface.
 *
 * It's recommended that a label has a `4px` spacing above its associated
 * control element.
 */
var Label = exports.Label = function Label(_ref) {
  var children = _ref.children,
    htmlFor = _ref.htmlFor,
    id = _ref.id,
    testId = _ref.testId;
  return (0, _react.jsx)("label", {
    css: fieldsetLabelStyles,
    id: id,
    htmlFor: htmlFor,
    "data-testid": testId
  }, children);
};

/**
 * __Legend__
 *
 * A Legend represents a caption for a fieldset in a user interface.
 */
var Legend = exports.Legend = function Legend(_ref2) {
  var children = _ref2.children;
  return (0, _react.jsx)("legend", {
    css: fieldsetLabelStyles
  }, children);
};
var _default = exports.default = Label;