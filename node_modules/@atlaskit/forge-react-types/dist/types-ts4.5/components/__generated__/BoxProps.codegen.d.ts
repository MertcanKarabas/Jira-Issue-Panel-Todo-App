/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 *
 * Extract component prop types from UIKit 2 components - BoxProps
 *
 * @codegen <<SignedSource::ab40887994d5e0d0b8bb3a7e7144bccf>>
 * @codegenCommand yarn workspace @atlaskit/forge-react-types codegen
 * @codegenDependency ../../../../forge-ui/src/components/UIKit2-codegen/box/__generated__/index.partial.tsx <<SignedSource::890eea4f597d519fa80c16c24d302cbe>>
 */
import React from 'react';
import { Box as PlatformBox } from '@atlaskit/primitives';
import type { CSSProperties } from '@emotion/serialize';
import type * as CSS from 'csstype';
import type { MediaQuery } from '@atlaskit/primitives';
import { tokensMap } from '@atlaskit/primitives';
type TokensMap = typeof tokensMap;
type TokensMapPropKey = keyof TokensMap;
type TokenizedProps = {
    [K in TokensMapPropKey]?: keyof TokensMap[K];
};
type RawCSSValue = string & {};
type RelaxedTokenizedProps = {
    [K in TokensMapPropKey]?: keyof TokensMap[K] | RawCSSValue;
};
type AllMedia = MediaQuery | '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)' | '@media (prefers-color-scheme: dark)' | '@media (prefers-color-scheme: light)' | '@media (prefers-reduced-motion: reduce)';
type StandardCSSProps = Omit<CSSProperties, TokensMapPropKey>;
type RestrictedPropsSpec = RelaxedTokenizedProps & StandardCSSProps;
type SafeCSSObject<SupportedPropKeys extends keyof CSSProperties = keyof CSSProperties, RawCSSPropKeys extends SupportedPropKeys = SupportedPropKeys, RestrictedProps extends RestrictedPropsSpec = RestrictedPropsSpec> = {
    [MQ in AllMedia]?: Omit<SafeCSSObject<SupportedPropKeys, RawCSSPropKeys, RestrictedPropsSpec>, AllMedia>;
} & {
    [Pseudo in CSS.Pseudos]?: Omit<SafeCSSObject<SupportedPropKeys, RawCSSPropKeys, RestrictedPropsSpec>, CSS.Pseudos | AllMedia>;
} & Pick<TokenizedProps, Exclude<Extract<SupportedPropKeys, TokensMapPropKey>, RawCSSPropKeys | keyof RestrictedProps>> & Pick<StandardCSSProps, Exclude<Extract<SupportedPropKeys, keyof StandardCSSProps>, RawCSSPropKeys | keyof RestrictedProps>> & // force standard css prop values for allowCSS: true
Pick<CSSProperties, Extract<RawCSSPropKeys, keyof CSSProperties>> & RestrictedProps;
type XCSSValidatorParam = {
    [key in keyof CSSProperties]: true | {
        supportedValues: Array<RestrictedPropsSpec[key]>;
    } | {
        allowCSS: true;
    };
};
/**
 *
 * @param supportedXCSSProps - the list of css props to be supported for the intended component.
 *    If not provided, all the props will be supported. The props could be either standard css props
 *    or design token based props. If the prop is a design token based prop, the value of the prop
 *    will be validated against the design tokens map to ensure the value is a valid design token string.
 * @returns a function that takes a style object and returns a style object with only the supported props
 *    as specified in the supportedXCSSProps list. The props that are not supported will be removed from the
 *    returned style object and a warning will be logged in the console.
 */
declare const makeXCSSValidator: <U extends XCSSValidatorParam>(supportedXCSSProps: U) => (styleObj: SafeCSSObject<keyof CSSProperties, keyof CSSProperties, RestrictedPropsSpec> | SafeCSSObject<Extract<keyof U, keyof CSSProperties>, Extract<{
    [K in Extract<keyof U, keyof CSSProperties>]: U[K] extends {
        allowCSS: true;
    } ? K : never;
}[Extract<keyof U, keyof CSSProperties>], Extract<keyof U, keyof CSSProperties>>, {
    [K_2 in Extract<{
        [K_1 in Extract<keyof U, keyof CSSProperties>]: U[K_1] extends {
            supportedValues: RestrictedPropsSpec[K_1][];
        } ? K_1 : never;
    }[Extract<keyof U, keyof CSSProperties>], Extract<keyof U, keyof CSSProperties>>]?: (U[K_2] extends {
        supportedValues: infer V;
    } ? Exclude<V[keyof V], number | Function> : never) | undefined;
}>) => SafeCSSObject<Extract<keyof U, keyof CSSProperties>, Extract<{
    [K in Extract<keyof U, keyof CSSProperties>]: U[K] extends {
        allowCSS: true;
    } ? K : never;
}[Extract<keyof U, keyof CSSProperties>], Extract<keyof U, keyof CSSProperties>>, {
    [K_2 in Extract<{
        [K_1 in Extract<keyof U, keyof CSSProperties>]: U[K_1] extends {
            supportedValues: RestrictedPropsSpec[K_1][];
        } ? K_1 : never;
    }[Extract<keyof U, keyof CSSProperties>], Extract<keyof U, keyof CSSProperties>>]?: (U[K_2] extends {
        supportedValues: infer V;
    } ? Exclude<V[keyof V], number | Function> : never) | undefined;
}>;
export { makeXCSSValidator };
export type { SafeCSSObject };
declare const xcssValidator: (styleObj: SafeCSSObject<keyof CSSProperties, keyof CSSProperties, RestrictedPropsSpec> | SafeCSSObject<"backgroundColor" | "borderBlockColor" | "borderBlockEndColor" | "borderBlockEndWidth" | "borderBlockStartColor" | "borderBlockStartWidth" | "borderBlockWidth" | "borderBottomColor" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomWidth" | "borderColor" | "borderEndEndRadius" | "borderEndStartRadius" | "borderInlineColor" | "borderInlineEndColor" | "borderInlineEndWidth" | "borderInlineStartColor" | "borderInlineStartWidth" | "borderInlineWidth" | "borderLeftColor" | "borderLeftWidth" | "borderRadius" | "borderRightColor" | "borderRightWidth" | "borderStartEndRadius" | "borderStartStartRadius" | "borderTopColor" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopWidth" | "borderWidth" | "boxShadow" | "color" | "height" | "margin" | "marginBlock" | "marginBlockEnd" | "marginBlockStart" | "marginBottom" | "marginInline" | "marginInlineEnd" | "marginInlineStart" | "marginLeft" | "marginRight" | "marginTop" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "opacity" | "padding" | "paddingBlock" | "paddingBlockEnd" | "paddingBlockStart" | "paddingBottom" | "paddingInline" | "paddingInlineEnd" | "paddingInlineStart" | "paddingLeft" | "paddingRight" | "paddingTop" | "width" | "borderBottomStyle" | "borderLeftStyle" | "borderRightStyle" | "borderTopStyle" | "position" | "borderStyle", "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width", {
    borderBlockEndWidth?: "border.width" | undefined;
    borderBlockStartWidth?: "border.width" | undefined;
    borderBlockWidth?: "border.width" | undefined;
    borderBottomLeftRadius?: "border.radius" | undefined;
    borderBottomRightRadius?: "border.radius" | undefined;
    borderBottomWidth?: "border.width" | undefined;
    borderEndEndRadius?: "border.radius" | undefined;
    borderEndStartRadius?: "border.radius" | undefined;
    borderInlineEndWidth?: "border.width" | undefined;
    borderInlineStartWidth?: "border.width" | undefined;
    borderInlineWidth?: "border.width" | undefined;
    borderLeftWidth?: "border.width" | undefined;
    borderRadius?: "border.radius" | undefined;
    borderRightWidth?: "border.width" | undefined;
    borderStartEndRadius?: "border.radius" | undefined;
    borderStartStartRadius?: "border.radius" | undefined;
    borderTopLeftRadius?: "border.radius" | undefined;
    borderTopRightRadius?: "border.radius" | undefined;
    borderTopWidth?: "border.width" | undefined;
    borderWidth?: "border.width" | undefined;
    borderBottomStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderLeftStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderRightStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderTopStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    position?: "relative" | "static" | undefined;
    borderStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
}>) => SafeCSSObject<"backgroundColor" | "borderBlockColor" | "borderBlockEndColor" | "borderBlockEndWidth" | "borderBlockStartColor" | "borderBlockStartWidth" | "borderBlockWidth" | "borderBottomColor" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderBottomWidth" | "borderColor" | "borderEndEndRadius" | "borderEndStartRadius" | "borderInlineColor" | "borderInlineEndColor" | "borderInlineEndWidth" | "borderInlineStartColor" | "borderInlineStartWidth" | "borderInlineWidth" | "borderLeftColor" | "borderLeftWidth" | "borderRadius" | "borderRightColor" | "borderRightWidth" | "borderStartEndRadius" | "borderStartStartRadius" | "borderTopColor" | "borderTopLeftRadius" | "borderTopRightRadius" | "borderTopWidth" | "borderWidth" | "boxShadow" | "color" | "height" | "margin" | "marginBlock" | "marginBlockEnd" | "marginBlockStart" | "marginBottom" | "marginInline" | "marginInlineEnd" | "marginInlineStart" | "marginLeft" | "marginRight" | "marginTop" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "opacity" | "padding" | "paddingBlock" | "paddingBlockEnd" | "paddingBlockStart" | "paddingBottom" | "paddingInline" | "paddingInlineEnd" | "paddingInlineStart" | "paddingLeft" | "paddingRight" | "paddingTop" | "width" | "borderBottomStyle" | "borderLeftStyle" | "borderRightStyle" | "borderTopStyle" | "position" | "borderStyle", "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width", {
    borderBlockEndWidth?: "border.width" | undefined;
    borderBlockStartWidth?: "border.width" | undefined;
    borderBlockWidth?: "border.width" | undefined;
    borderBottomLeftRadius?: "border.radius" | undefined;
    borderBottomRightRadius?: "border.radius" | undefined;
    borderBottomWidth?: "border.width" | undefined;
    borderEndEndRadius?: "border.radius" | undefined;
    borderEndStartRadius?: "border.radius" | undefined;
    borderInlineEndWidth?: "border.width" | undefined;
    borderInlineStartWidth?: "border.width" | undefined;
    borderInlineWidth?: "border.width" | undefined;
    borderLeftWidth?: "border.width" | undefined;
    borderRadius?: "border.radius" | undefined;
    borderRightWidth?: "border.width" | undefined;
    borderStartEndRadius?: "border.radius" | undefined;
    borderStartStartRadius?: "border.radius" | undefined;
    borderTopLeftRadius?: "border.radius" | undefined;
    borderTopRightRadius?: "border.radius" | undefined;
    borderTopWidth?: "border.width" | undefined;
    borderWidth?: "border.width" | undefined;
    borderBottomStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderLeftStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderRightStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    borderTopStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
    position?: "relative" | "static" | undefined;
    borderStyle?: "dashed" | "dotted" | "hidden" | "none" | "solid" | undefined;
}>;
type PlatformBoxProps = React.ComponentProps<typeof PlatformBox>;
type XCSSProp = ReturnType<typeof xcssValidator>;
export type BoxProps = Pick<PlatformBoxProps, 'padding' | 'paddingBlock' | 'paddingBlockStart' | 'paddingBlockEnd' | 'paddingInline' | 'paddingInlineStart' | 'paddingInlineEnd' | 'backgroundColor' | 'children' | 'ref' | 'testId' | 'role'> & {
    xcss?: XCSSProp;
};
